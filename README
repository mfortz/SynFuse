SynFuse README file


Author: Mark Forteza (mforteza@sfu.ca)

Last revised: April 30, 2018



The pipeline is divided into four processes/scripts:
	1. gene similarity computations via genFamClust
	2. identifying candidate cluster pairs
	3. silhouette computations
	4. FDR calculation


Required: python 3.6, java 1.7, 
	BLAST+ package 	
	genfamclust-1.0.1 by Ali, Khan and Arvestad		(https://code.google.com/archive/p/genfamclust/)
	neighbourhood_correlation-2.1 by Song, et al.	(http://www.neighborhoodcorrelation.org/)


########################################

1. Gene Similarity

This part needs more work to turn it into a single executable. For now we provide instructions for running the genFamClust program. I suggest reading this section first before the genFamClust documentation.

Input: 
	- list of protein sequences for every gene in each species
	- gene location file (all_gene_file)
Output:
	- translated genFamClust neighbourhood correlation file



Protein sequences must be in FASTA format. The all_gene_file must be in a tab delimited table in the following format:

	[species	ctg	gene_family	gene	gene_orientation	start_gene	end_gene	#exons	exons_position]


The script "makeSequence.py" prepares genFamClust inputs.


###############
makeSequence.py

Arguments:
Input:  
    1. File with two columns: species name, and path to fasta file 
            of the corresponding species.
       Fasta files must be in standard fasta format, but with one 
            line for each nucleotide sequence.
        
    2. ALL_GENE_file, containing position of genes on their contig

Output: 
    3. Sequence File (*.fasta) :
        List with two columns, tab delimited. First columnn for gene name, 
        second column for full sequence.
    4. Synteny File (*.hsf):
        List with four columns, tab delimited. Format: 
        [species name, chromosome name, gene name, position on chromosome]


Python scripts should be called with the listed arguments in numerical order, e.g.

	$ python makeSequence.py <1> <2> <3> <4>

	
	
We run the some parts of genFamClust to compute sequence similarities. In particular, we are interested in a neighbourhood correlation (NC) scores. Please see the genFamClust documentation for installation instructions. Then run the following:

	$ java -Xmx2000m -Xms1800m -jar genfamclust-1.0.1.jar DataPreparator -p <path to output folder> <fasta file> <hsf file>

	$ java -Xmx2000m -Xms1800m -jar genfamclust-1.0.1.jar BlastModule -p <path to output folder> -rp <path to blast program> GenFam.fasta 

	$ java -Xmx2000m -Xms1800m -jar genfamclust-1.0.1.jar NeighborhoodCorrelation -p <path to output folder> -rp <path to nbrhood correlation> GenFam.bl


This outputs a GenFam.nnc which contains a list with three columns. Two columns are for temporary gene names used by genFamClust and the last for the NC score between the two genes. NC scores range from 0 to 1, where 1 is highest. Gene pairs are only reported if the NC score is above a threshold of 0.3. Finally, translate GenFam.nnc to the proper gene names.

translateGenFam.py

Arguments:
Input: 
	1. synteny file (input of genFamClust, in hsf file format)
	2. GenFam.nnc
Output:
	3. translated GenFam.nnc file



#####################################################

2. Candidate cluster pairs

Indentify pairs of gene families which exhibits particular synteny conservation signals. Two types of candidates:
	A. shared neighbors. Two families F1 and F2, spanning disjoint sets of species, with some members having a neighbor from anothr family F3. The smaller family must span up to 6 species.  
	B. tandem duplicates. Two families which are syntenic in multiple species. 

#############
candidates.py

Arguments:
Input: 
	1. all gene file. Contains initial clustering and gene location information.
Output:
	2. candidate pairs

Optional Input:
	3. maximum number of species spanned by the smaller family in shared neigbor candidates. Default 6.
	4. minimum number of species spanned by the smaller family in tandem duplicates. Default 5.


The output file is a list with two columns, containing the names of the two families identified as candidates.


#######################################################

3. Silhouette 

Compute the silhouette before and after joining candidate families. Also computes shuffled graphs for FDR null hypothesis. 

#############
silhouette.py

Arguments:
Input:
	1. translated GenFam scores
	2. all gene file
	3. candidate pairs
Output:
	4. initial cluster silhouette
	5. joined cluster silhouette
	6. shuffled cluster silhouette 
	7. joined shuffled cluster silhouette 


Ouputs 4 and 6 are tables in the following format:

[family 	 num_vertices 	 num_edges 	 min,max,ave silhouette	 gene silhouette]

where
"family" is the name of the gene family. 
"num_vertices" is the number of genes in the family. 
"num_edges" is the number of gene pairs within the family whose similarity is reported in part 1. 
"min,max,ave silhouette" are min max and average computed silhouette among members of the family.
"gene silhouette" is a list of the gene members and their individual silhouettes.

Silhouette scores range from -1 to 1, where a higher score means that genes inside the cluster are similar to each other and not similar to genes from different clusters.


Outputs 5 and 7 is in the format:

[F1 	 F2 	 num_edges_between 	 s1 	 s2 	 s12 	 s 	 d]

where
"F1" and "F2" are the names of the two families
"num_edges_between" counts pairs of genes, one from each of F1 and F2, with significant similarity.
"s1" and "s2" are the average silhouettes of F1 and F2, respectively.
"s12" is the average of s1 and s2, scaled by size of the families.
"s" is the silhouette after joining the two clusters.
"d" is s-s12.

The value of d is in the range [-2,2], where a higher score indicates an improvement in silhouette after joining the two clusters.


#########################################################

4. FDR analysis

#############
computeFDR.py

Arguments:
Input:
	1. joined cluster silhouette
	2. joined shuffled cluster silhouette 
	3. FDR percentage (value between 0 and 1)
Output:
	4. accepted cluster pairs
 

The output is a list of accepted cluster pairs.




















